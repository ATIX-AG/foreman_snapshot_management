// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SnapshotForm rendering render 1`] = `
<ForemanForm
  enableReinitialize={false}
  initialValues={
    Object {
      "description": "",
      "includeRam": false,
      "name": "",
      "snapshotMode": "",
      "useQuiesce": false,
    }
  }
  onCancel={[Function]}
  onSubmit={[Function]}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Array [],
        "refs": Array [],
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "snapshotMode",
        "useQuiesce",
        "includeRam",
        "description",
        "name",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Array [],
        "refs": Array [],
      },
      "fields": Object {
        "description": StringSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "includeRam": BooleanSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
        "name": StringSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "snapshotMode": StringSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "useQuiesce": BooleanSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    }
  }
>
  <TextField
    className=""
    inputClassName="col-md-8"
    label="Name"
    name="name"
    required="true"
    type="text"
  />
  <TextField
    className=""
    inputClassName="col-md-8"
    label="Description"
    name="description"
    required={false}
    type="textarea"
  />
  <div
    className="form-group"
  >
    <label
      className="col-md-2 control-label"
    >
      Snapshot Mode
      <FieldLevelHelp
        buttonClass="field-help"
        content="Select Snapshot Mode between mutually exclusive options, 'Memory' (includes RAM) and 'Quiesce'."
        placement="top"
        rootClose={true}
      />
    </label>
    <div
      className="col-md-8"
    >
      <select
        className="common-select form-control"
        onChange={[Function]}
      >
        <option
          key=""
          value=""
        />
        <option
          key="Memory"
          value="Memory"
        >
          Memory
        </option>
      </select>
    </div>
  </div>
</ForemanForm>
`;

exports[`SnapshotForm rendering render with limitSnapshotNameFormat capability 1`] = `
<ForemanForm
  enableReinitialize={false}
  initialValues={
    Object {
      "description": "",
      "includeRam": false,
      "name": "",
      "snapshotMode": "",
      "useQuiesce": false,
    }
  }
  onCancel={[Function]}
  onSubmit={[Function]}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Array [],
        "refs": Array [],
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "snapshotMode",
        "useQuiesce",
        "includeRam",
        "description",
        "name",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Array [],
        "refs": Array [],
      },
      "fields": Object {
        "description": StringSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "includeRam": BooleanSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
        "name": StringSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "matches": false,
            "max": true,
            "min": true,
            "required": true,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "snapshotMode": StringSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "useQuiesce": BooleanSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    }
  }
>
  <TextField
    className=""
    inputClassName="col-md-8"
    label="Name"
    name="name"
    required="true"
    type="text"
  />
  <TextField
    className=""
    inputClassName="col-md-8"
    label="Description"
    name="description"
    required={false}
    type="textarea"
  />
  <div
    className="form-group"
  >
    <label
      className="col-md-2 control-label"
    >
      Snapshot Mode
      <FieldLevelHelp
        buttonClass="field-help"
        content="Select Snapshot Mode between mutually exclusive options, 'Memory' (includes RAM) and 'Quiesce'."
        placement="top"
        rootClose={true}
      />
    </label>
    <div
      className="col-md-8"
    >
      <select
        className="common-select form-control"
        onChange={[Function]}
      >
        <option
          key=""
          value=""
        />
        <option
          key="Memory"
          value="Memory"
        >
          Memory
        </option>
      </select>
    </div>
  </div>
</ForemanForm>
`;

exports[`SnapshotForm rendering render with optional Props 1`] = `
<ForemanForm
  enableReinitialize={false}
  initialValues={
    Object {
      "description": "Hello World",
      "includeRam": true,
      "name": "Snapshot1",
    }
  }
  onCancel={[Function]}
  onSubmit={[Function]}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Array [],
        "refs": Array [],
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "snapshotMode",
        "useQuiesce",
        "includeRam",
        "description",
        "name",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Array [],
        "refs": Array [],
      },
      "fields": Object {
        "description": StringSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "includeRam": BooleanSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
        "name": StringSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "snapshotMode": StringSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "useQuiesce": BooleanSchema {
          "_blacklist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Array [],
            "refs": Array [],
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    }
  }
>
  <TextField
    className=""
    inputClassName="col-md-8"
    label="Name"
    name="name"
    required="true"
    type="text"
  />
  <TextField
    className=""
    inputClassName="col-md-8"
    label="Description"
    name="description"
    required={false}
    type="textarea"
  />
  <div
    className="form-group"
  >
    <label
      className="col-md-2 control-label"
    >
      Snapshot Mode
      <FieldLevelHelp
        buttonClass="field-help"
        content="Select Snapshot Mode between mutually exclusive options, 'Memory' (includes RAM) and 'Quiesce'."
        placement="top"
        rootClose={true}
      />
    </label>
    <div
      className="col-md-8"
    >
      <select
        className="common-select form-control"
        onChange={[Function]}
      >
        <option
          key=""
          value=""
        />
        <option
          key="Memory"
          value="Memory"
        >
          Memory
        </option>
      </select>
    </div>
  </div>
</ForemanForm>
`;
